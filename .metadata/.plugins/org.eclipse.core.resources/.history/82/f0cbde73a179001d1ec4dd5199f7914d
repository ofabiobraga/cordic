#include <stdio.h>
#include <math.h>
#include "cordic.h"

#define CORDIC_RESOLUTION 16

short int CORDIC_TABLE[RESOLUTION] = {
    12867,
    7596,
    4013,
    2037,
    1022,
    511,
    255,
    127,
    63,
    31,
    15,
    7,
    3,
    1,
    0,
    0
};

void __cordic_compute(
    short int x,
    short int y,
    short int z,
    short int * x_out,
    short int * y_out,
    short int * z_out
);

void __cordic_compute(
    short int x,
    short int y,
    short int z,
    short int * x_out,
    short int * y_out,
    short int * z_out
) {
    short int x_tmp, y_tmp, z_tmp;
    short int d;

    short int i = 0;


    for (i = 0; i < CORDIC_RESOLUTION; i++) {
        x_tmp = (y >> i);
        y_tmp = (x >> i);
        z_tmp = CORDIC_TABLE[i]
        d = __sign(z);

        if (d < 0) {
            y_tmp *= -1;
            z_tmp *= -1;
        } else {
            x_tmp *= -1;
        }

        x = x + y_tmp;
        y = y + x_tmp;
        z = z + z_tmp;
    }

    * x_out = x;
    * y_out = y;
    * z_out = z;
}



void cordic_sin()
{

}

void cordic_cos()
{

}

void cordic_sinh()
{

}

void cordic_cosh()
{

}

void cordic_divide()
{

}

void cordic_multiply()
{

}

void cordic_pol2rect()
{

}

void cordic_rect2pol()
{

}


int __sign(short int value)
{
    return (value < 0) ? -1 : 1;
}
